# Usa Debian 12.8 (bookworm) come base
FROM debian:bookworm

# Imposta variabili per installazione
ENV DEBIAN_FRONTEND=noninteractive 
ENV RUST_VERSION=1.87.0 
ENV PYTHON_VERSION=3.10
ENV VIRTUAL_ENV=/opt/venv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Installa dipendenze di sistema
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget curl git ca-certificates build-essential \
    libglib2.0-0 libxext6 libsm6 libxrender1 \
    libssl-dev libffi-dev python3 python3-pip python3-venv \
    python3-dev python3-setuptools python3-wheel \
    && rm -rf /var/lib/apt/lists/*

# Crea e attiva un ambiente virtuale
RUN python3 -m venv $VIRTUAL_ENV
# Il PATH modificato sopra farà sì che tutti i comandi usino il python dell'ambiente virtuale

# Aggiorna pip nell'ambiente virtuale
RUN pip install --upgrade pip

# Verifica versione Python
RUN python --version && pip --version

# Installa Rust
RUN curl https://sh.rustup.rs -sSf | bash -s -- -y --default-toolchain ${RUST_VERSION} && \
    echo 'source $HOME/.cargo/env' >> /root/.bashrc

ENV PATH="/root/.cargo/bin:$PATH"

# Verifica Rust
RUN rustc --version

# Installa PyTorch con supporto CUDA nell'ambiente virtuale
RUN pip install torch torchvision --index-url https://download.pytorch.org/whl/cu124

# Installa le dipendenze Python per DNABERT nell'ambiente virtuale
RUN pip install sentencepiece==0.2.0

# Clona e installa DNABERT nell'ambiente virtuale
RUN git clone https://github.com/jerryji1993/DNABERT && \
    cd DNABERT && \
    pip install --editable .

# Rimuove le righe contenenti "sentencepiece" da requirements.txt prima di installare le dipendenze
RUN sed -i '/sentencepiece/d' DNABERT/examples/requirements.txt && \
    cd DNABERT/examples && pip install -r requirements.txt


# Imposta directory di lavoro
WORKDIR /DNABERT/examples

# Entry point (può essere modificato secondo necessità)
CMD ["/bin/bash"]
